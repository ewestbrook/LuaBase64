# -*- org-confirm-babel-evaluate: nil -*-
#+title: Fast and Light Base64 Encoding, Decoding, and LTN12 filtering for Lua
* Installation
You can install with either LuaRocks or the included Makefile.
** Installing with LuaRocks
#+begin_src bash
luarocks install luab64
#+end_src
** Installing with Makefile
#+begin_src bash
git clone https://github.com/ewestbrook/luab64
cd luab64
make && sudo make install
#+end_src
See the Makefile itself for options you can override with
environment variables.  Notably, you can provide an
~INST_PREFIX~ value to specify a non-default installation
path prefix.
* Synopsis
** Encoding
#+begin_src lua
local luab64 = require'luab64'
local r = luab64.encode(s)
#+end_src
** Decoding
#+begin_src lua
local luab64 = require'luab64'
local r = luab64.decode(s)
#+end_src
** LTN12 Encode Filtering
#+begin_src lua
local ltn12 = require'ltn12'
local src = ltn12.source.string(s)

local luab64 = require'luab64'
local filter = luab64.encfilter()

local sink, t = ltn12.sink.table()
ltn12.pump.all(ltn12.source.chain(src, filter), sink)
local r = table.concat(t)
#+end_src
** LTN12 Decode Filtering
#+begin_src lua
local ltn12 = require'ltn12'
local src = ltn12.source.string(s)

local luab64 = require'luab64'
local filter = luab64.decfilter()

local sink, t = ltn12.sink.table()
ltn12.pump.all(ltn12.source.chain(src, filter), sink)
local r = table.concat(t)
#+end_src
* Examples
** Simple Encode/Decode
#+begin_src lua :exports both :results output
local luab64 = require'luab64'
local s = 'Encode this string!'
print('input:   ' .. s)
print('encoded: ' .. luab64.encode(s))
print('decoded: ' .. luab64.decode(luab64.encode(s)))
#+end_src

#+RESULTS:
: input:   Encode this string!
: encoded: RW5jb2RlIHRoaXMgc3RyaW5nIQ==
: decoded: Encode this string!
** LTN12 Filter Encoding
#+begin_src lua :exports both :results output
local luab64 = require'luab64'
local ltn12  = require'ltn12'

local s = 'String for testing!'

local encsrc = ltn12.source.string(s)
local encfilter = luab64.encfilter()
local encsink, t = ltn12.sink.table()
ltn12.pump.all(ltn12.source.chain(encsrc, encfilter), encsink)
local r = table.concat(t)

local decsrc = ltn12.source.string(r)
local decfilter = luab64.decfilter()
local decsink, u = ltn12.sink.table()
ltn12.pump.all(ltn12.source.chain(decsrc, decfilter), decsink)
local z = table.concat(u)

print('input:   ' .. s)
print('encoded: ' .. r)
print('decoded: ' .. z)
#+end_src

#+RESULTS:
: input:   String for testing!
: encoded: U3RyaW5nIGZvciB0ZXN0aW5nIQ==
: decoded: String for testing!
